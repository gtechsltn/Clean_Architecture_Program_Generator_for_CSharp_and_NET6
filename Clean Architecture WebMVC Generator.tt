<#@ template language="C#" debug="true" hostspecific="true" #>
<#@ output extension=".txt" #>
<#@ assembly name="System" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Data.Entity" #>
<#@ assembly name="EnvDTE" #>
<#@ import namespace="EnvDTE" #>
<#@ include file="T4Helper.ttinclude" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Reflection" #>
<# 
    if (MessageWindow("Clean Architecture WebMVC Generator","Run this template")==false)
        throw new Exception("Aborted"); 
#>
<#
    /////////////////////////////
    // Generate WebMVC project //
    /////////////////////////////
    string StartupProject = "WebMVC";
    CreateWebCoreProject(StartupProject);
#>
<Project Sdk="Microsoft.NET.Sdk.Web">

  <PropertyGroup>
    <TargetFramework>net6.0</TargetFramework>
    <Nullable>enable</Nullable>
    <ImplicitUsings>enable</ImplicitUsings>
  </PropertyGroup>

  <ItemGroup>
	<PackageReference Include="Microsoft.EntityFrameworkCore.Design" Version="6.0.2">
	  <PrivateAssets>all</PrivateAssets>
	  <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
	</PackageReference>
  </ItemGroup>

  <ItemGroup>
    <ProjectReference Include="..\Persistence\Persistence.csproj" />
  </ItemGroup>

</Project>
<# OverwriteFile(StartupProject, "", "WebMVC.csproj"); #>
<#  
    ////////////////////////////////////////////////////////
    // Get defined Entities details and DbContext details //
    ////////////////////////////////////////////////////////
    string EntityNamespace = "Domain.Entities";
    string DbContextNamespace = "Persistence.Context";
    string efContext = "ApplicationDbContext"; //If Context is not in the same namespace rename this to the name of the context

    IServiceProvider serviceProvider = (IServiceProvider)this.Host;
    DTE dte = serviceProvider.GetService(typeof(DTE)) as DTE; 
    var project1 = FindProjectByName(dte, "Domain");
    var classes = FindClasses(project1, EntityNamespace, "");
    var classNames = classes
                    .Select(currentClass => currentClass.Name)
                    .ToList();
    var project2 = FindProjectByName(dte, "Persistence");
    var dbcclass = FindClasses(project2, DbContextNamespace, "");
    var classWithDbContext = dbcclass.FirstOrDefault(currentClass => currentClass.Bases.OfType<CodeElement>().Any(currentBase => currentBase.Name == "DbContext"));
    if(classWithDbContext != null)
    {
        efContext = classWithDbContext.Name;
    }
#>
//////////////////////////////////////////////
// generated ExceptionHandlingMiddleware.cs //
//////////////////////////////////////////////
using Domain.Exceptions;
using System.Text.Json;

namespace <#= StartupProject #>.Middlewares
{
    internal sealed class ExceptionHandlingMiddleware : IMiddleware
    {
        private readonly ILogger<ExceptionHandlingMiddleware> _logger;

        public ExceptionHandlingMiddleware(ILogger<ExceptionHandlingMiddleware> logger) => _logger = logger;

        public async Task InvokeAsync(HttpContext context, RequestDelegate next)
        {
            try
            {
                await next(context);
            }
            catch (Exception e)
            {
                _logger.LogError(e, e.Message);

                await HandleExceptionAsync(context, e);
            }
        }

        private static async Task HandleExceptionAsync(HttpContext httpContext, Exception exception)
        {
            httpContext.Response.ContentType = "application/json";

            httpContext.Response.StatusCode = exception switch
            {
                BadRequestException => StatusCodes.Status400BadRequest,
                NotFoundException => StatusCodes.Status404NotFound,
                _ => StatusCodes.Status500InternalServerError
            };

            var response = new
            {
                error = exception.Message
            };

            await httpContext.Response.WriteAsync(JsonSerializer.Serialize(response));
        }
    }
}
<# CreateFile(StartupProject, "Middlewares","ExceptionHandlingMiddleware.cs"); #>
//////////////////////////
// generated Program.cs //
//////////////////////////
using Serilog;
using Application;
using Persistence;
using <#= StartupProject #>.Middlewares;

var builder = WebApplication.CreateBuilder(args);

var configuration = new ConfigurationBuilder()
    // Read from your appsettings.json.
    .AddJsonFile("appsettings.json")
    // Read from your secrets.
    //.AddUserSecrets<Program>(optional: true)
    //.AddEnvironmentVariables()
    .Build();

// Add services to the container.
builder.Services.AddControllersWithViews();

// added these for this project
builder.Services.AddPersistence();
builder.Services.AddApplication();

//this is needed for Serilog.AspNetCore, Serilog.Settings.Configuration, Serilog.Sinks.File, Serilog.Sinks.Console,Serilog.Expressions
//installed in application project,
//this project has reference to application project
Log.Logger = new LoggerConfiguration()
    .ReadFrom.Configuration(configuration)
    .CreateLogger();
builder.Host.UseSerilog();

//this is need for exception handling
builder.Services.AddTransient<ExceptionHandlingMiddleware>();

var app = builder.Build();

//added to handle exceptions
app.UseMiddleware<ExceptionHandlingMiddleware>();

app.UseHttpsRedirection();
app.UseStaticFiles();

app.UseRouting();

app.UseAuthorization();

app.MapControllerRoute(
    name: "default",
    pattern: "{controller=Home}/{action=Index}/{id?}");

app.Run();
<# OverwriteFile(StartupProject, "","Program.cs"); #>
<#
////////////////////////////////
// generated appsettings.json //
////////////////////////////////
#>
{
  //define connection here
  "ConnectionStrings": {
    "SqlServerDB": "Server=DESKTOP-GBANT4V; Database=BookStoresDB; Trusted_Connection=True;"
  },
  
  //required to control serilog
  "Serilog": {
    "MinimumLevel": "Information",
    "Override": {
      "Microsoft.AspNetCore": "Warning"
    },
    "WriteTo": [
      {
        "Name": "Console"
      },
      {
        "Name": "File",
        "Args": {
          "path": "Logs\\AppLogs.log",
          "outputTemplate": "{Timestamp:HH:mm:ss.fff zzz} [{Level}] [{SourceContext}] {Message}{NewLine}{Exception}"
        }
      }
    ],
    "Filter": [
      {
        "Name": "ByExcluding",
        "Args": {
          "expression": "StartsWith(SourceContext, 'Microsoft.')"
        }
      }
    ]
  },
  "AllowedHosts": "*"
}
<# OverwriteFile(StartupProject, "","appsettings.json"); #>
<#foreach(string className in classNames)
{
    var properClassName = GetProperClassName(className);
    var controller =  properClassName + "sController";
    (var key1,var key1Type) = GetKeyPropertyOfAClass(dte,project1,EntityNamespace+"."+properClassName);
    var propList = FindListOfProperitesOfClass(dte,project1,EntityNamespace+"."+properClassName);
#>
////////////////////////////////////
// generated <#= controller #>.cs //
////////////////////////////////////
using Application.Interfaces;
using Domain.Entities;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Logging;

// For more information on enabling Web API for empty projects, visit https://go.microsoft.com/fwlink/?LinkID=397860

namespace WebMVC
{
    public class <#= properClassName #>Controller : Controller
    {
        private readonly ILogger<<#= properClassName #>Controller> logger;
        private readonly IServiceManager _serviceManager;

        public <#= properClassName #>Controller(IServiceManager serviceManager, ILogger<<#= properClassName #>Controller> logger)
        {
            _serviceManager = serviceManager;
            this.logger = logger;
        }
        
        // GET: <#= properClassName #>
        [HttpGet]
        public async Task<IActionResult> Index()
        {
            var result = await _serviceManager.<#= properClassName #>Service.GetAll<#= properClassName #>();
            return View(result.entities);
        }

        // GET <#= properClassName #>/Details/5
        public async Task<IActionResult> Details(<#= key1Type #> id)
        {
            var result = await _serviceManager.<#= properClassName #>Service.Get<#= properClassName #>ById(id);
            return View(result.entity);
        }

        // GET <#= properClassName #>/Create>
        public IActionResult Create()
        {
            return View();
        }

        // POST <#= properClassName #>/Create>
        [HttpPost]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> Create([Bind("<#= propList #>")] <#= properClassName #> entity)
        {
            if (ModelState.IsValid)
            {
                var result = await _serviceManager.<#= properClassName #>Service.Add<#= properClassName #>(entity);
                return RedirectToAction(nameof(Index));
            }
            return View(entity);
        }

        // Get <#= properClassName #>/Edit/5
        public async Task<IActionResult> Edit(<#= key1Type #> id)
        {
            var result = await _serviceManager.<#= properClassName #>Service.UpdateWithId<#= properClassName #>(id);
            return View(result);
        }

        // POST <#= properClassName #>/Edit/5
        [HttpPost]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> Edit(<#= key1Type #> id, [Bind("<#= propList #>")] <#= properClassName #> entity)
        {
            if (ModelState.IsValid)
            {
                var result = await _serviceManager.<#= properClassName #>Service.UpdateWithId<#= properClassName #>(id);
                return RedirectToAction(nameof(Index));
            }
            return View(entity);
        }

        // Get <#= properClassName #>/Delete/5
        public async Task<IActionResult> Delete(<#= key1Type #> id)
        {
            var result = await _serviceManager.<#= properClassName #>Service.UpdateWithId<#= properClassName #>(id);
            return View(result);
        }

        // POST <<#= properClassName #>/Delete/5
        [HttpPost, ActionName("Delete")]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> DeleteConfirmed(<#= key1Type #> id)
        {
            var result = await _serviceManager.<#= properClassName #>Service.Remove<#= properClassName #>(id);
            return RedirectToAction(nameof(Index));
        }
    }
}
<# CreateFile(StartupProject, "Controllers", controller+".cs"); #>
<#
}
#>
<#foreach(string className in classNames)
{
    ////////////////////////////////////
    // generate views                 //
    ////////////////////////////////////
    var properClassName = GetProperClassName(className);
    var viewfolder =  "Views/"+properClassName;
    (var key1,var key1Type) = GetKeyPropertyOfAClass(dte,project1,EntityNamespace+"."+properClassName);
    var propList = ProperitesOfClass(dte,project1,EntityNamespace+"."+properClassName);
#>
//////////////////
// Index.cshtml //
//////////////////
@model IEnumerable<Domain.Entities.<#= properClassName #>>

@{
    ViewData["Title"] = "Index";
}

<h1>Index</h1>

<p>
    <a asp-action="Create">Create New</a>
</p>
<table class="table">
    <thead>
        <tr>
<#
foreach(string property in propList)
{
#>
            <th>
                @Html.DisplayNameFor(model => model.<#= property #>)
            </th>
<#
}
#>
            <th></th>
        </tr>
    </thead>
    <tbody>
@foreach (var item in Model) {
        <tr>
<#
foreach(string property in propList)
{
#>
            <th>
                @Html.DisplayFor(modelItem => item.<#= property #>)
            </th>
<#
}
#>
            <td>
                <a asp-action="Edit" asp-route-id="@item.<#= key1 #>">Edit</a> |
                <a asp-action="Details" asp-route-id="@item.<#= key1 #>">Details</a> |
                <a asp-action="Delete" asp-route-id="@item.<#= key1 #>">Delete</a>
            </td>
        </tr>
}
    </tbody>
</table>
<# CreateFile(StartupProject, viewfolder, "Index.cshtml"); #>
/////////////////
// Edit.cshtml //
/////////////////
@model Domain.Entities.<#= properClassName #>>

@{
    ViewData["Title"] = "Edit";
}

<h1>Edit</h1>

<h4><#= properClassName #>></h4>
<hr />
<div class="row">
    <div class="col-md-4">
        <form asp-action="Edit">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <input type="hidden" asp-for="<#= key1 #>>" />
<#
foreach(string property in propList)
{
#>
            <div class="form-group">
                <label asp-for="<#= property #>" class="control-label"></label>
                <input asp-for="<#= property #>" class="form-control" />
                <span asp-validation-for="<#= property #>" class="text-danger"></span>
            </div>
<#
}
#>
            <div class="form-group">
                <input type="submit" value="Save" class="btn btn-primary" />
            </div>
        </form>
    </div>
</div>

<div>
    <a asp-action="Index">Back to List</a>
</div>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
}
<# CreateFile(StartupProject, viewfolder, "Edit.cshtml"); #>
////////////////////
// Details.cshtml //
////////////////////
@model Domain.Entities.<#= properClassName #>

@{
    ViewData["Title"] = "Details";
}

<h1>Details</h1>

<div>
    <h4>Author</h4>
    <hr />
    <dl class="row">
<#
foreach(string property in propList)
{
#>
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.<#= property #>)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.<#= property #>)
        </dd>
<#
}
#>
    </dl>
</div>
<div>
    <a asp-action="Edit" asp-route-id="@Model?.<#= key1 #>">Edit</a> |
    <a asp-action="Index">Back to List</a>
</div>
<# CreateFile(StartupProject, viewfolder, "Details.cshtml"); #>
///////////////////
// Delete.cshtml //
///////////////////
@model Domain.Entities.<#= properClassName #>

@{
    ViewData["Title"] = "Delete";
}

<h1>Delete</h1>

<h3>Are you sure you want to delete this?</h3>
<div>
    <h4>Author</h4>
    <hr />
    <dl class="row">
<#
foreach(string property in propList)
{
#>
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.<#= property #>)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.<#= property #>)
        </dd>
<#
}
#>
    </dl>
   
    <form asp-action="Delete">
        <input type="hidden" asp-for="<#= key1 #>" />
        <input type="submit" value="Delete" class="btn btn-danger" /> |
        <a asp-action="Index">Back to List</a>
    </form>
</div>
<# CreateFile(StartupProject, viewfolder, "Delete.cshtml"); #>
///////////////////
// Create.cshtml //
///////////////////
@model Domain.Entities.<#= properClassName #>

@{
    ViewData["Title"] = "Create";
}

<h1>Create</h1>

<h4><#= properClassName #></h4>
<hr />
<div class="row">
    <div class="col-md-4">
        <form asp-action="Create">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
<#
foreach(string property in propList)
{
#>
            <div class="form-group">
                <label asp-for="<#= property #>" class="control-label"></label>
                <input asp-for="<#= property #>" class="form-control" />
                <span asp-validation-for="<#= property #>" class="text-danger"></span>
            </div>
<#
}
#>
            <div class="form-group">
                <input type="submit" value="Create" class="btn btn-primary" />
            </div>
        </form>
    </div>
</div>

<div>
    <a asp-action="Index">Back to List</a>
</div>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
}
<# CreateFile(StartupProject, viewfolder, "Create.cshtml"); #>

<#
}
#>
